use colored::Colorize;
use crate::ram::Ram;

pub const PROGRAM_START: u16 = 0x200;

#[derive(Debug)]
pub struct Cpu {
    vx: [u8; 16],
    pc: u16,
    i: u16
}

impl Cpu {
    pub fn new() -> Cpu {
        Cpu{
            vx: [0; 16],
            pc: PROGRAM_START,
            i: 0
        }
    }

    pub fn execute(&mut self, ram: &mut Ram) {
        let hi =
            ram.read_byte(self.pc) as u16;
        let lo = ram.read_byte(self.pc + 1) as u16;
        let instruction: u16 = (hi << 8) | lo;
        println!("--> Instruction read {} --> hi:{} lo:{}",
            format!("{:#X}", instruction).bold().blue(),
            format!("{:#X}", hi).red(), 
            format!("{:#X}", lo).red()
        );

        let nnn = instruction & 0x0FFF;
        let nn = (instruction & 0x0FF) as u8;
        let n = instruction & 0x00F;
        let x = (instruction & 0x0F00) >> 8;
        let y = (instruction & 0x00F0) >> 4;

        match (instruction & 0xF000) >> 12 {
            0x1 => { 
                self.pc = nnn;
                println!("{} jump to: {}", " JP ".black().on_truecolor(0, 255, 136), nnn)
            }
            _ => panic!("unrecognized instruction: {}", format!("{:#X}", instruction).truecolor(0, 255, 136))
        }
    }
}
